package com.jptest.payments.fulfillment.testonia.core.impl;

import com.jptest.payments.fulfillment.testonia.core.Context;
import com.jptest.payments.fulfillment.testonia.core.guice.GuiceInjector;
import com.jptest.payments.fulfillment.testonia.model.dynamicvalue.PlaceHolder;

import javax.inject.Inject;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Represents the global context for a test case. This holds the
 * execution data generated by each {@link ExecutionUnit}
 */
public class TestCaseGlobalContext implements Context, GuiceInjector {

    private Map<String, Object> executionData;
    private String contextIdentifier = null;
    private String correlationId;
    private Map<String, Object> reportingAttributes;
    private Map<String, PlaceHolder> dynamicValues;

    // Partial injection since AggregateAssert requires configuration
    @Inject
    private AggregateAssert aggregateAssert;

    public TestCaseGlobalContext() {
        this.executionData = new ConcurrentHashMap<String, Object>();
        this.reportingAttributes = new ConcurrentHashMap<String, Object>();
        this.dynamicValues = new ConcurrentHashMap<String, PlaceHolder>();
        initializeDependencies();
    }

    public TestCaseGlobalContext(String testName) {
        this();
        contextIdentifier = testName;
    }

    @Override
    public String getContextIdentifier() {
        return contextIdentifier;
    }

    @Override
    public Object getData(String key) {
        return executionData.get(key);
    }

    @Override
    public void setData(String key, Object value) {
        executionData.put(key, value);
    }

    @Override
    public void removeData(String key) {
        executionData.remove(key);
    }

    @Override
    public AggregateAssert getAggregateAssert() {
        return aggregateAssert;
    }

    public void setCorrelationId(String correlationId) {
        this.correlationId = correlationId;
    }

    @Override
    public String getCorrelationId() {
        return correlationId;
    }

    /**
     * Get attributes to display on kibana dashboard
     */
    @Override
    public Map<String, Object> getReportingAttributes() {
        return reportingAttributes;
    }

    /**
     * To add attributes that will show up on kibana dashboard
     */
    @Override
    public void addReportingAttribute(String key, Object value) {
        reportingAttributes.put(key, value);
    }

   /* @Override
    public Map<String, PlaceHolder> getDynamicValues() {
        return dynamicValues;
    }

    *//**
     * To add dynamic value that will be used to replace placeholder in golden file
     *//*
    @Override
    public void addDynamicValue(String key, PlaceHolder value) {
        dynamicValues.put(key, value);
    }*/

}
